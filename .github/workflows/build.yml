name: Build Multi-Platform Multi-Architecture

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }} - Python ${{ matrix.python-version }} - ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11", "3.12", "3.13"]
        arch: [x86_64, aarch64]
        exclude:
          # Windows aarch64 构建需要特殊处理，暂时排除
          - os: windows-latest
            arch: aarch64
          # Ubuntu aarch64 需要交叉编译
          - os: ubuntu-latest
            arch: aarch64
        include:
          # 添加 Linux aarch64 交叉编译
          - os: ubuntu-latest
            python-version: "3.11"
            arch: aarch64
            cross: true
          - os: ubuntu-latest
            python-version: "3.12"
            arch: aarch64
            cross: true
          - os: ubuntu-latest
            python-version: "3.13"
            arch: aarch64
            cross: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.arch == 'aarch64' && format('{0}-unknown-linux-gnu', matrix.arch) || '' }}

    - name: Set up cross compilation (Linux aarch64)
      if: matrix.cross == true
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
        echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          rust/target
        key: ${{ runner.os }}-${{ matrix.arch }}-cargo-${{ hashFiles('rust/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.arch }}-cargo-
    - name: Install Python dependencies
      run: |
        echo ${{ matrix.python-version }} > .python-version
        uv sync --dev

    - name: Debug file existence
      run: |
        ls -la
        echo "Checking for README.MD:"
        test -f README.MD && echo "README.MD exists" || echo "README.MD not found"
        test -f README.md && echo "README.md exists" || echo "README.md not found"

    - name: Build with maturin develop
      working-directory: ${{ github.workspace }}
      run: |
        maturin develop

    - name: Build with uv build
      working-directory: ${{ github.workspace }}
      run: |
        uv build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.arch }}
        path: dist/
        retention-days: 7

    - name: Configure git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Commit build results
      run: |
        git add -A
        git diff --staged --quiet || git commit -m "Auto-build: ${{ matrix.os }} Python ${{ matrix.python-version }} ${{ matrix.arch }} [skip ci]"
      continue-on-error: true

    - name: Push changes
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        git push
      continue-on-error: true
