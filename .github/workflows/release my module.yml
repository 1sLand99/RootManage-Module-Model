name: release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release Tag (就填版本号)'
        required: true     

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.0
        with:  
          ref: main  
      - uses: actions/checkout@v4.1.0
        with:  
          ref: module  
          path: module

      - name: 获取仓库 URL
        id: get_repo_url
        run: |
          echo "repo_url=https://github.com/${{ github.repository }}" >> "$GITHUB_ENV"
      - name: 获取版本
        id: get_version
        run: |
          echo "date=$(date +%Y%m%d)" >> "$GITHUB_ENV"

      - name: Extract variables from module.prop
        id: extract_vars
        run: |
          # 提取变量并保存到环境变量中
          id=$(awk -F= '/id=/ {print $2}' MyModule/module.prop)
          name=$(awk -F= '/name=/ {print $2}' MyModule/module.prop)
          version=$(awk -F= '/version=/ {print $2}' MyModule/module.prop)
          versionCode=$(awk -F= '/versionCode=/ {print $2}' MyModule/module.prop)
          author=$(awk -F= '/author=/ {print $2}' MyModule/module.prop)
          description=$(awk -F= '/description=/ {print $2}' MyModule/module.prop)
          
          # 检查提取的变量是否为空，并输出提示信息
          if [ -z "$id" ] || [ -z "$name" ] || [ -z "$version" ] || [ -z "$versionCode" ] || [ -z "$author" ] || [ -z "$description" ]; then
            echo "请先执行 initial 工作流以生成 module.prop 文件"
            exit 1
          fi

          # 保存变量到环境文件
          echo "id=${id}" >> $GITHUB_ENV
          echo "name=${name}" >> $GITHUB_ENV
          echo "version-old=${version}" >> $GITHUB_ENV
          echo "versionCode-old=${versionCode}" >> $GITHUB_ENV
          echo "version=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          echo "versionCode=${{ env.date }}" >> $GITHUB_ENV
          echo "author=${author}" >> $GITHUB_ENV
          echo "description=${description}" >> $GITHUB_ENV


      - name: 调试变量
        run: |
          echo "版本: ${{ env.version }}"
          echo "版本号: ${{ env.versionCode }}"
          echo "旧版本: ${{ env.version-old }}"
          echo "旧版本号: ${{ env.versionCode-old }}"
          echo "日期: ${{ env.date }}"
          echo "作者: ${{ env.author }}"

      - name: Check if updates are needed & 更新 update.json 和 module.prop
        run: |
          if [ "${{ env.version }}" != "${{ env.version-old }}" ]; then
            echo "Version needs update."
            sed -i "s/${{ env.version-old }}/${{ env.version }}/g" "MyModule/module.prop"
          fi

          if [ "${{ env.versionCode }}" != "${{ env.versionCode-old }}" ]; then
            echo "VersionCode needs update."
            sed -i "s/${{ env.versionCode-old }}/${{ env.date }}/g" "MyModule/module.prop"
          fi



      - name: Commit changes
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          git add update.json MyModule/module.prop
          git commit -m "update update.json & module.prop"
          git push origin main

      - name: Package module
        run: |
          # 打包模块
          zip -r "${{ env.name }}-${{ env.version }}-${{ env.versionCode }}-by${{ env.author }}.zip" *

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.version }}
          files: |
            ${{ env.name }}-${{ env.version }}-${{ env.versionCode }}-by${{ env.author }}.zip
          generate_release_notes: true
          fail_on_unmatched_files: false  # 如果文件匹配失败不会导致工作流失败
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}




      - name: upload
        run: |
          # 推送到母仓库

          git status
          git checkout -b module
          git remote add upstream https://github.com/LIghtJUNction/KernelSu-Module-Model-.git
          git add ${{ env.name }}-${{ env.version }}-${{ env.versionCode }}-by${{ env.author }}.zip
          git commit -m "模块共享"
          git push upstream module
        env:
          UPSTREAM_ACCESS_TOKEN: ${{ secrets.UPSTREAM_ACCESS_TOKEN }}
          # 用于身份验证的 token
          GITHUB_TOKEN: ${{ secrets.UPSTREAM_ACCESS_TOKEN }}


