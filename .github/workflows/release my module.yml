name: release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release Tag (一般就填版本号)'
        required: true     
      id:
        description: '模块 ID'
        required: true     
      name:
        description: '模块名'
        required: true     

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.0
        with:  
          ref: main  

      - name: 获取仓库 URL
        id: get_repo_url
        run: |
          echo "repo_url=https://github.com/${{ github.repository }}" >> "$GITHUB_ENV"

      - name: Extract variables from module.prop
        id: extract_vars
        run: |
          # 提取变量并保存到环境变量中
          id=$(awk -F= '/id=/ {print $2}' ${{ github.event.inputs.id }}/module.prop)
          name=$(awk -F= '/name=/ {print $2}' ${{ github.event.inputs.id }}/module.prop)
          version=$(awk -F= '/version=/ {print $2}' ${{ github.event.inputs.id }}/module.prop)
          versionCode=$(awk -F= '/versionCode=/ {print $2}' ${{ github.event.inputs.id }}/module.prop)
          author=$(awk -F= '/author=/ {print $2}' ${{ github.event.inputs.id }}/module.prop)
          description=$(awk -F= '/description=/ {print $2}' ${{ github.event.inputs.id }}/module.prop)

          # 保存变量到环境文件
          echo "id=${id}" >> $GITHUB_ENV
          echo "name=${name}" >> $GITHUB_ENV
          echo "version=${version}" >> $GITHUB_ENV
          echo "versionCode=${versionCode}" >> $GITHUB_ENV
          echo "author=${author}" >> $GITHUB_ENV
          echo "description=${description}" >> $GITHUB_ENV

    
      - name: 获取版本
        id: get_version
        run: |
          echo "date=$(date +%Y%m%d)" >> "$GITHUB_ENV"

      - name: 更新 update.json 和 module.prop
        run: |
          # 创建 update.json 文件
          echo '{
            "version": "${{ github.event.inputs.tag }}",
            "versionCode": "${{ env.date }}",
            "zipUrl": "${{ env.repo_url }}/releases/download/${{ github.event.inputs.tag }}/${{ github.event.inputs.name }}-${{ github.event.inputs.tag }}.zip",
            "changelog": "${{ env.repo_url }}/raw/main/CHANGELOG.md"
          }' > update.json

          # 检查 module.prop 是否存在
          if [ ! -f "${{ github.event.inputs.id }}/module.prop" ]; then
            echo "未找到 module.prop 文件"
            exit 1
          fi

          # 替换 module.prop 中的 version 和 versionCode
          current_version=$(grep -oP 'version=\K[^ ]+' "${{ github.event.inputs.id }}/module.prop" || echo "not_found")
          current_versionCode=$(grep -oP 'versionCode=\K[^ ]+' "${{ github.event.inputs.id }}/module.prop" || echo "not_found")

          if [ "$current_version" = "not_found" ]; then
            echo "未在 module.prop 文件中找到 version 模式"
            exit 1
          fi

          if [ "$current_versionCode" = "not_found" ]; then
            echo "未在 module.prop 文件中找到 versionCode 模式"
            exit 1
          fi

          sed -i "s/$current_version/${{ github.event.inputs.tag }}/g" "${{ github.event.inputs.id }}/module.prop"
          sed -i "s/$current_versionCode/${{ env.date }}/g" "${{ github.event.inputs.id }}/module.prop"

      - name: 运行 build.sh
        run: |
          cd ${{ github.event.inputs.id }}

          sh build.sh
          
      - name: 创建 GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.tag }}
          files: |
            ${{ env.name }}-${{ env.version }}(${{ env.versionCode }})-by${{ env.author }}.zip
          generate_release_note: true
