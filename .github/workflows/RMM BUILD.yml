name: RMM BUILD

on:
    workflow_dispatch:
        inputs:
            tag:
                description: '建议使用v1.0.0-moduleid格式:版本标签'
                required: true

            hooks:
                description: '使用prebuild.${hooks} / postbuild.${hooks}钩子 来自定义构建流程 '
                required: true
                type: choice
                options:
                    - 'py'
                    - 'go'
                    - "exe"
                    - "ps1"
                    - "cmd"
                    - "bat"
                    - "elf"
                    - "sh"
                    - "rs"
                default: 'py'

            dev:
                description: '是否为开发版本'
                required: true
                type: choice
                options:
                    - 'true'
                    - 'false'
                default: 'false'

            prerelease:
                description: '是否为预发布版本'
                required: true
                type: choice
                options:
                    - 'true'
                    - 'false'
                default: 'false'

            upload:
                description: '是否上传至rmm模块仓库？（提交PR)'
                required: true
                type: choice
                options:
                    - 'true'
                    - 'false'
                default: 'true'



jobs:
    RMM_BUILD_ubuntu:
        runs-on: ubuntu-latest
        if : ${{ github.event.inputs.hooks != 'exe' && github.event.inputs.hooks != 'ps1' && github.event.inputs.hooks != 'cmd' && github.event.inputs.hooks != 'bat' }}
        permissions:
            contents: write
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            MODDIR: ${{ github.workspace }}/MyModule
            BUILDDIR: ${{ github.workspace }}/RMM_BUILD
            BUILDTOML: ${{ github.workspace }}/RMM_BUILD/RMM_BUILD.toml
            tag: ${{ github.event.inputs.tag }}
            hooks: ${{ github.event.inputs.hooks }}
            dev: ${{ github.event.inputs.dev }}
            prerelease: ${{ github.event.inputs.prerelease }}
            upload: ${{ github.event.inputs.upload }}
          
        steps:
            - name: Checkout code
              uses: actions/checkout@v4.2.2 # 最新版
              with:
                lfs: true
                
            - name: Install uv
              uses: astral-sh/setup-uv@v6.1.0
              with:
                python-version: 3.13

            - name: Install RMM
              run: |
                ls -l
                uv tool install -e . || ls -l

            - name: Install rust
              if: ${{ github.event.inputs.hooks == 'rs' }}
              uses: actions-rs/toolchain@v1.0.7
              with:
                toolchain: stable
                profile: minimal

            - name: cargo && pre-build
              if: ${{ github.event.inputs.hooks == 'rs' }}
              uses: actions-rs/cargo@v1.0.3
              with:
                command: run
                args: --manifest-path=./RMM_BUILD/prebuild/rs/Cargo.toml
           
            - name: Go && pre-build
              if: ${{ github.event.inputs.hooks == 'go' }}
              uses: actions/setup-go@v5.5.0
              with:
                go-version: '1.24.3'
                check-latest: true
              
            
            - name: elf && pre-build
              if: ${{ github.event.inputs.hooks == 'elf' }}
              run: |
                if [ -f "./RMM_BUILD/prebuild" ]; then
                  chmod +x ./RMM_BUILD/prebuild
                  file ./RMM_BUILD/bin/prebuild

                  ./RMM_BUILD/bin/prebuild
                fi


            - name: sh && pre-build
              if: ${{ github.event.inputs.hooks == 'sh' }}
              run: |
                if [ -f "./RMM_BUILD/prebuild" ]; then
                  chmod +x ./RMM_BUILD/prebuild
                  ./RMM_BUILD/prebuild.sh
                fi
        
                


                
    RMM_BUILD_windows:
        runs-on: windows-latest
        if : ${{ github.event.inputs.hooks == 'exe' }} or ${{ github.event.inputs.hooks == 'ps1' }} or ${{ github.event.inputs.hooks == 'cmd' }} or ${{ github.event.inputs.hooks == 'bat' }}
        permissions:
            contents: write
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            MODDIR: ${{ github.workspace }}/MyModule
            BUILDDIR: ${{ github.workspace }}/RMM_BUILD
            BUILDTOML: ${{ github.workspace }}/RMM_BUILD/RMM_BUILD.toml
            tag: ${{ github.event.inputs.tag }}
            hooks: ${{ github.event.inputs.hooks }}
            dev: ${{ github.event.inputs.dev }}
            prerelease: ${{ github.event.inputs.prerelease }}
            upload: ${{ github.event.inputs.upload }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4.2.2 # 最新版
              with:
                lfs: true

            - name: Install uv
              uses: astral-sh/setup-uv@v6.1.0
              with:
                python-version: 3.13

            - name: exe && pre-build
              if: ${{ github.event.inputs.hooks == 'exe' }}
              run: |
                if (Test-Path "./RMM_BUILD/prebuild.exe") {
                    ./RMM_BUILD/prebuild.exe
                }

            - name: ps1 && pre-build
              if: ${{ github.event.inputs.hooks == 'ps1' }}
              run: |
                if (Test-Path "./RMM_BUILD/prebuild.ps1") {
                    powershell -ExecutionPolicy Bypass -File ./RMM_BUILD/prebuild.ps1
                }

            - name: cmd && pre-build
              if: ${{ github.event.inputs.hooks == 'cmd' }}
              run: |
                if (Test-Path "./RMM_BUILD/prebuild.cmd") {
                    cmd /c ./RMM_BUILD/prebuild.cmd
                }

            - name: bat && pre-build
              if: ${{ github.event.inputs.hooks == 'bat' }}
              run: |
                if (Test-Path "./RMM_BUILD/prebuild.bat") {
                    cmd /c ./RMM_BUILD/prebuild.bat
                }


    

    RMM_MODULES_TEST:
        runs-on: ubuntu-latest
        needs: [RMM_BUILD_ubuntu, RMM_BUILD_windows]
        permissions:
            contents: write
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            MODDIR: ${{ github.workspace }}/MyModule
            BUILDDIR: ${{ github.workspace }}/RMM_BUILD
            BUILDTOML: ${{ github.workspace }}/RMM_BUILD/RMM_BUILD.toml
            tag: ${{ github.event.inputs.tag }}
            hooks: ${{ github.event.inputs.hooks }}
            dev: ${{ github.event.inputs.dev }}
            prerelease: ${{ github.event.inputs.prerelease }}
            upload: ${{ github.event.inputs.upload }}
            
        steps:
            - name: Checkout code
              uses: actions/checkout@v4.2.2 # 最新版
              with:
                lfs: true

            - name: Download Module
              run: |
              
            - name: Install uv
              uses: astral-sh/setup-uv@v6.1.0
              with:
                python-version: 3.13

            - name: Install RMM
              run: |
                uv tool install -e . || ls -l

            - name: Run tests
              run: |
                rmm test $MODULE_ZIP