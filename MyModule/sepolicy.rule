#这个文件中的 SELinux 策略将会在系统启动时加载
# 这个文件中的 SELinux 策略将会在系统启动时加载
# 你可以在这里定义你的 SELinux 策略规则

# 示例：
# allow <源类型> <目标类型> : <类> { <权限> };
# 例如：
# allow my_app my_data_file: file { read write };

# 详细说明：
# 1. 源类型（source type）：这是发起操作的主体类型，例如一个应用程序的类型。
# 2. 目标类型（target type）：这是操作的目标类型，例如一个文件的类型。
# 3. 类（class）：这是操作的对象类别，例如文件、目录、进程等。
# 4. 权限（permissions）：这是允许的具体操作，例如读取、写入、执行等。

# 你可以使用以下命令来查看系统中已有的类型、类和权限：
# sesearch -A -s <源类型> -t <目标类型> -c <类> -p <权限>

# 注意事项：
# 1. 确保你的策略规则不会破坏系统的安全性。
# 2. 在测试环境中验证你的策略规则，确保它们按预期工作。
# 3. 避免使用过于宽泛的权限，尽量使用最小权限原则。

# 例如，允许 my_app 类型的进程读取和写入 my_data_file 类型的文件：
allow my_app my_data_file: file { read write };

# 例如，允许 web_server 类型的进程读取和执行 web_content 类型的文件：
allow web_server web_content: file { read execute };

# 例如，允许 database_server 类型的进程读取、写入和创建 database_data 类型的文件：
allow database_server database_data: file { read write create };

# 例如，允许 backup_service 类型的进程读取和写入 backup_storage 类型的目录：
allow backup_service backup_storage: dir { read write };

# 例如，允许 admin_tool 类型的进程管理 system_log 类型的文件：
allow admin_tool system_log: file { read write append };

# 例如，允许 network_service 类型的进程绑定到 network_port 类型的端口：
allow network_service network_port: tcp_socket { name_bind };

# 例如，允许 user_app 类型的进程读取和写入 user_data 类型的文件：
allow user_app user_data: file { read write };

# 例如，允许 security_daemon 类型的进程读取和写入 security_config 类型的文件：
allow security_daemon security_config: file { read write };

# 例如，允许 media_player 类型的进程读取 media_content 类型的文件：
allow media_player media_content: file { read };

# 例如，允许 printer_service 类型的进程读取和写入 print_jobs 类型的文件：
allow printer_service print_jobs: file { read write };

# 例如，允许 update_service 类型的进程读取和写入 update_package 类型的文件：
allow update_service update_package: file { read write };

# 例如，允许 audit_service 类型的进程读取和写入 audit_logs 类型的文件：
allow audit_service audit_logs: file { read write };

# 例如，允许 vpn_service 类型的进程绑定到 vpn_port 类型的端口：
allow vpn_service vpn_port: tcp_socket { name_bind };

# 例如，允许 email_client 类型的进程读取和写入 email_data 类型的文件：
allow email_client email_data: file { read write };

# 例如，允许 chat_app 类型的进程读取和写入 chat_history 类型的文件：
allow chat_app chat_history: file { read write };

# 例如，允许 game_engine 类型的进程读取和写入 game_assets 类型的文件：
allow game_engine game_assets: file { read write };

# 例如，允许 cloud_sync 类型的进程读取和写入 cloud_storage 类型的文件：
allow cloud_sync cloud_storage: file { read write };

# 例如，允许 analytics_service 类型的进程读取和写入 analytics_data 类型的文件：
allow analytics_service analytics_data: file { read write };

# 例如，允许 voice_assistant 类型的进程读取和写入 voice_commands 类型的文件：
allow voice_assistant voice_commands: file { read write };

# 例如，允许 sensor_service 类型的进程读取和写入 sensor_data 类型的文件：
allow sensor_service sensor_data: file { read write };

# 例如，允许 payment_service 类型的进程读取和写入 transaction_records 类型的文件：
allow payment_service transaction_records: file { read write };

# 例如，不允许 my_app 类型的进程读取和写入 system_config 类型的文件：
dontaudit my_app system_config: file { read write };

# 例如，不允许 guest_user 类型的进程执行 admin_tool 类型的文件：
dontaudit guest_user admin_tool: file { execute };

# 例如，不允许 untrusted_app 类型的进程访问 sensitive_data 类型的文件：
dontaudit untrusted_app sensitive_data: file { read write };

# 例如，不允许 external_service 类型的进程绑定到 internal_port 类型的端口：
dontaudit external_service internal_port: tcp_socket { name_bind };

# 例如，不允许 test_app 类型的进程读取和写入 production_data 类型的文件：
dontaudit test_app production_data: file { read write };

# 例如，允许 maintenance_service 类型的进程读取和写入 maintenance_logs 类型的文件：
allow maintenance_service maintenance_logs: file { read write };

# 例如，允许 monitoring_service 类型的进程读取和写入 monitoring_data 类型的文件：
allow monitoring_service monitoring_data: file { read write };

# 例如，允许 scheduler_service 类型的进程读取和写入 schedule_data 类型的文件：
allow scheduler_service schedule_data: file { read write };

# 例如，允许 notification_service 类型的进程读取和写入 notification_data 类型的文件：
allow notification_service notification_data: file { read write };

# 例如，允许 sync_service 类型的进程读取和写入 sync_data 类型的文件：
allow sync_service sync_data: file { read write };

# 例如，允许 logging_service 类型的进程读取和写入 log_files 类型的文件：
allow logging_service log_files: file { read write };

# 例如，允许 cache_service 类型的进程读取和写入 cache_data 类型的文件：
allow cache_service cache_data: file { read write };

# 例如，允许 indexing_service 类型的进程读取和写入 index_data 类型的文件：
allow indexing_service index_data: file { read write };

# 例如，允许 search_service 类型的进程读取和写入 search_index 类型的文件：
allow search_service search_index: file { read write };

# 例如，允许 backup_service 类型的进程读取和写入 backup_data 类型的文件：
allow backup_service backup_data: file { read write };

# 例如，允许 sync_service 类型的进程读取和写入 sync_logs 类型的文件：
allow sync_service sync_logs: file { read write };

# 例如，允许 telemetry_service 类型的进程读取和写入 telemetry_data 类型的文件：
allow telemetry_service telemetry_data: file { read write };

# 例如，允许 update_service 类型的进程读取和写入 update_logs 类型的文件：
allow update_service update_logs: file { read write };

# 例如，允许 diagnostic_service 类型的进程读取和写入 diagnostic_data 类型的文件：
allow diagnostic_service diagnostic_data: file { read write };

# 例如，允许 alert_service 类型的进程读取和写入 alert_logs 类型的文件：
allow alert_service alert_logs: file { read write };

# 例如，允许 api_service 类型的进程读取和写入 api_logs 类型的文件：
allow api_service api_logs: file { read write };

# 例如，允许 auth_service 类型的进程读取和写入 auth_logs 类型的文件：
allow auth_service auth_logs: file { read write };

# 例如，允许 config_service 类型的进程读取和写入 config_files 类型的文件：
allow config_service config_files: file { read write };

# 例如，允许 data_service 类型的进程读取和写入 data_files 类型的文件：
allow data_service data_files: file { read write };

# 例如，允许 event_service 类型的进程读取和写入 event_logs 类型的文件：
allow event_service event_logs: file { read write };

# 例如，允许 file_service 类型的进程读取和写入 file_data 类型的文件：
allow file_service file_data: file { read write };

# 例如，允许 image_service 类型的进程读取和写入 image_files 类型的文件：
allow image_service image_files: file { read write };

# 例如，允许 video_service 类型的进程读取和写入 video_files 类型的文件：
allow video_service video_files: file { read write };

# 例如，允许 audio_service 类型的进程读取和写入 audio_files 类型的文件：
allow audio_service audio_files: file { read write };

# 例如，允许 report_service 类型的进程读取和写入 report_files 类型的文件：
allow report_service report_files: file { read write };

# 例如，允许 log_service 类型的进程读取和写入 log_data 类型的文件：
allow log_service log_data: file { read write };



# 你可以参考以下网站以获取更多关于 SELinux 策略规则的信息：
# https://selinuxproject.org/page/Main_Page
# https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/using_selinux/index
# https://wiki.archlinux.org/title/SELinux